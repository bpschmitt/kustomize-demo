apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: nr-k8s-otel-collector-daemonset
spec:
  mode: daemonset
  hostNetwork: true
  serviceAccount: nr-k8s-otel-collector
  securityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    privileged: false
    readOnlyRootFilesystem: true
    runAsNonRoot: true
    runAsUser: 1001
  image: "newrelic/nrdot-collector-k8s:1.2.0"
  imagePullPolicy: IfNotPresent
  args: 
    config: "/config/daemonset-config.yaml"
    feature-gates: "receiver.kubeletstats.enableCPUUsageMetrics" # ["--config", "/config/daemonset-config.yaml", "--feature-gates","receiver.kubeletstats.enableCPUUsageMetrics"]
  env:
    - name: HOST_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: OTEL_EXPORTER_OTLP_ENDPOINT
      value: "http://$(HOST_IP):55680"
    - name: POD_NAME
      valueFrom:
        fieldRef:
          fieldPath: metadata.name
    - name: POD_UID
      valueFrom:
        fieldRef:
          fieldPath: metadata.uid
    - name: KUBE_NODE_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: spec.nodeName
    - name: OTEL_RESOURCE_ATTRIBUTES
      value: service.instance.id=$(POD_NAME),k8s.pod.uid=$(POD_UID)
    - name: NR_LICENSE_KEY
      valueFrom:
        secretKeyRef:
          name: nr-k8s-otel-collector-license
          key: licenseKey
    - name: OTELCOL_METRICS_KEEP
      valueFrom:
        configMapKeyRef:
          key: metrics.keep-daemonset
          name: nr-k8s-otel-collector-metrics-filter
    - name: OTELCOL_METRICS_DROP
      valueFrom:
        configMapKeyRef:
          key: metrics.drop-daemonset
          name: nr-k8s-otel-collector-metrics-filter
  volumeMounts:
    - name: host-fs
      mountPath: /hostfs
      readOnly: true
    - name: varlogpods
      mountPath: /var/log/pods
      readOnly: true
  volumes:
    - name: host-fs
      hostPath:
        path: /
    - name: varlogpods
      hostPath:
        path: /var/log/pods
  config:
    connectors:
      routing/metrics_egress:
        default_pipelines:
        - metrics/egress
        table:
        - condition: "true"
          context: metric
          pipelines:
          - metrics/egress
      routing/nr_metrics_pipelines:
        default_pipelines:
        - metrics/default
        error_mode: propagate
        table:
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/networkscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/loadscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/diskscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/memoryscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/cpuscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/filesystemscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/pagingscraper"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver"
          context: metric
          pipelines:
          - metrics/nr_prometheus_cadv_kubelet
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver"
          context: metric
          pipelines:
          - metrics/nr
        - condition: instrumentation_scope.name == "github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver/internal/scraper/processscraper"
          context: metric
          pipelines:
          - metrics/nr
    exporters:
      debug: {}
      otlphttp/newrelic:
        endpoint: https://otlp.nr-data.net
        headers:
          api-key: ${env:NR_LICENSE_KEY}
    processors:
      attributes/exclude_system_paging:
        actions:
        - action: delete
          key: type
        include:
          match_type: strict
          metric_names:
          - system.paging.operations
      batch:
        send_batch_max_size: 1000
        send_batch_size: 800
        timeout: 30s
      cumulativetodelta:
        include:
          metric_types:
          - sum
          - histogram
      filter/exclude_cpu_utilization:
        metrics:
          datapoint:
          - metric.name == "system.cpu.utilization" and attributes["state"] == "interrupt"
          - metric.name == "system.cpu.utilization" and attributes["state"] == "nice"
          - metric.name == "system.cpu.utilization" and attributes["state"] == "softirq"
      filter/exclude_filesystem_inodes_usage:
        metrics:
          datapoint:
          - metric.name == "system.filesystem.inodes.usage" and attributes["type"] ==
            "squashfs"
          - metric.name == "system.filesystem.inodes.usage" and attributes["state"] ==
            "reserved"
      filter/exclude_filesystem_usage:
        metrics:
          datapoint:
          - metric.name == "system.filesystem.usage" and attributes["type"] == "squashfs"
          - metric.name == "system.filesystem.usage" and attributes["state"] == "reserved"
      filter/exclude_filesystem_utilization:
        metrics:
          datapoint:
          - metric.name == "system.filesystem.utilization" and attributes["type"] == "squashfs"
      filter/exclude_memory_usage:
        metrics:
          datapoint:
          - metric.name == "system.memory.usage" and attributes["state"] == "slab_unreclaimable"
          - metric.name == "system.memory.usage" and attributes["state"] == "inactive"
      filter/exclude_memory_utilization:
        metrics:
          datapoint:
          - metric.name == "system.memory.utilization" and attributes["state"] == "slab_unreclaimable"
          - metric.name == "system.memory.utilization" and attributes["state"] == "inactive"
          - metric.name == "system.memory.utilization" and attributes["state"] == "cached"
          - metric.name == "system.memory.utilization" and attributes["state"] == "buffered"
          - metric.name == "system.memory.utilization" and attributes["state"] == "slab_reclaimable"
      filter/exclude_network:
        metrics:
          datapoint:
          - IsMatch(metric.name, "^system.network.*") == true and attributes["device"]
            == "lo"
      filter/exclude_system_disk:
        metrics:
          datapoint:
          - metric.name == "system.disk.operations" and IsMatch(attributes["device"],
            "^loop.*") == true
          - metric.name == "system.disk.merged" and IsMatch(attributes["device"], "^loop.*")
            == true
          - metric.name == "system.disk.io" and IsMatch(attributes["device"], "^loop.*")
            == true
          - metric.name == "system.disk.io_time" and IsMatch(attributes["device"], "^loop.*")
            == true
          - metric.name == "system.disk.operation_time" and IsMatch(attributes["device"],
            "^loop.*") == true
      filter/exclude_system_paging:
        metrics:
          datapoint:
          - metric.name == "system.paging.usage" and attributes["state"] == "cached"
          - metric.name == "system.paging.operations" and attributes["type"] == "cached"
      filter/include_exclude_metrics_custom_configmap:
        metrics:
          exclude:
            match_type: regexp
            metric_names:
            - ${OTELCOL_METRICS_DROP}
          include:
            match_type: regexp
            metric_names:
            - ${OTELCOL_METRICS_KEEP}
      filter/nr_exclude_container_zero_values:
        metrics:
          datapoint:
          - metric.name == "container_network_receive_errors_total" and value_double <
            0.5
          - metric.name == "container_network_transmit_errors_total" and value_double
            < 0.5
          - metric.name == "container_network_transmit_bytes_total" and value_double <
            0.5
          - metric.name == "container_network_receive_bytes_total" and value_double <
            0.5
      groupbyattrs:
        keys:
        - pod
        - uid
        - container
        - daemonset
        - replicaset
        - statefulset
        - deployment
        - cronjob
        - configmap
        - job
        - job_name
        - horizontalpodautoscaler
        - persistentvolume
        - persistentvolumeclaim
        - endpoint
        - mutatingwebhookconfiguration
        - validatingwebhookconfiguration
        - lease
        - storageclass
        - secret
        - service
        - resourcequota
        - node
        - namespace
      k8sattributes/ksm:
        auth_type: serviceAccount
        extract:
          labels:
          - from: node
            key_regex: node-role\.kubernetes\.io/(.*)
            tag_name: k8s.node.role.$$1
          metadata:
          - k8s.deployment.name
          - k8s.daemonset.name
          - k8s.namespace.name
          - k8s.node.name
          - k8s.pod.start_time
          - k8s.replicaset.name
          - k8s.statefulset.name
          - k8s.cronjob.name
          - k8s.job.name
        filter:
          node_from_env_var: KUBE_NODE_NAME
        passthrough: false
        pod_association:
        - sources:
          - from: resource_attribute
            name: k8s.pod.uid
        - sources:
          - from: resource_attribute
            name: k8s.pod.name
      memory_limiter:
        check_interval: 1s
        limit_percentage: 80
        spike_limit_percentage: 25
      metricstransform/hostmetrics_cpu:
        transforms:
        - action: update
          include: system.cpu.utilization
          operations:
          - action: aggregate_labels
            aggregation_type: mean
            label_set:
            - state
        - action: update
          include: system.paging.operations
          operations:
          - action: aggregate_labels
            aggregation_type: sum
            label_set:
            - direction
      resource/low_data_mode_inator:
        attributes:
        - action: delete
          key: http.scheme
        - action: delete
          key: net.host.name
        - action: delete
          key: net.host.port
        - action: delete
          key: url.scheme
        - action: delete
          key: server.address
      resource/newrelic:
        attributes:
        - action: upsert
          key: k8s.cluster.name
          value: placeholder
        - action: upsert
          key: newrelic.chart.version
          value: 0.8.50
        - action: upsert
          key: tags.nrVSAD
          value: vcit
        - action: upsert
          key: tags.nrPlatform
          value: AWS
        - action: upsert
          key: tags.nrENVT
          value: dev
        - action: upsert
          key: tags.bosunVersion
          value: "11"
        - action: upsert
          key: newrelic.entity.type
          value: k8s
      resourcedetection/cloudproviders:
        detectors:
        - gcp
        - eks
        - ec2
        - azure
        - aks
        override: false
        timeout: 2s
      resourcedetection/env:
        detectors:
        - env
        - system
        override: false
        system:
          hostname_sources:
          - os
          resource_attributes:
            host.name:
              enabled: false
      transform/ksm:
        metric_statements:
        - delete_key(resource.attributes, "k8s.node.name")
        - delete_key(resource.attributes, "k8s.namespace.name")
        - delete_key(resource.attributes, "k8s.pod.uid")
        - delete_key(resource.attributes, "k8s.pod.name")
        - delete_key(resource.attributes, "k8s.container.name")
        - delete_key(resource.attributes, "k8s.replicaset.name")
        - delete_key(resource.attributes, "k8s.deployment.name")
        - delete_key(resource.attributes, "k8s.statefulset.name")
        - delete_key(resource.attributes, "k8s.daemonset.name")
        - delete_key(resource.attributes, "k8s.job.name")
        - delete_key(resource.attributes, "k8s.cronjob.name")
        - delete_key(resource.attributes, "k8s.replicationcontroller.name")
        - delete_key(resource.attributes, "k8s.hpa.name")
        - delete_key(resource.attributes, "k8s.resourcequota.name")
        - delete_key(resource.attributes, "k8s.volume.name")
        - set(resource.attributes["k8s.pod.uid"], resource.attributes["uid"])
        - set(resource.attributes["k8s.node.name"], resource.attributes["node"])
        - set(resource.attributes["k8s.namespace.name"], resource.attributes["namespace"])
        - set(resource.attributes["k8s.pod.name"], resource.attributes["pod"])
        - set(resource.attributes["k8s.container.name"], resource.attributes["container"])
        - set(resource.attributes["k8s.replicaset.name"], resource.attributes["replicaset"])
        - set(resource.attributes["k8s.deployment.name"], resource.attributes["deployment"])
        - set(resource.attributes["k8s.statefulset.name"], resource.attributes["statefulset"])
        - set(resource.attributes["k8s.daemonset.name"], resource.attributes["daemonset"])
        - set(resource.attributes["k8s.job.name"], resource.attributes["job_name"])
        - set(resource.attributes["k8s.cronjob.name"], resource.attributes["cronjob"])
        - set(resource.attributes["k8s.replicationcontroller.name"], resource.attributes["replicationcontroller"])
        - set(resource.attributes["k8s.hpa.name"], resource.attributes["horizontalpodautoscaler"])
        - set(resource.attributes["k8s.resourcequota.name"], resource.attributes["resourcequota"])
        - set(resource.attributes["k8s.volume.name"], resource.attributes["volumename"])
        - set(resource.attributes["k8s.volume.name"], resource.attributes["persistentvolume"])
        - set(resource.attributes["k8s.pvc.name"], resource.attributes["persistentvolumeclaim"])
        - delete_key(resource.attributes, "uid")
        - delete_key(resource.attributes, "node")
        - delete_key(resource.attributes, "namespace")
        - delete_key(resource.attributes, "pod")
        - delete_key(resource.attributes, "container")
        - delete_key(resource.attributes, "replicaset")
        - delete_key(resource.attributes, "deployment")
        - delete_key(resource.attributes, "statefulset")
        - delete_key(resource.attributes, "daemonset")
        - delete_key(resource.attributes, "job_name")
        - delete_key(resource.attributes, "cronjob")
        - delete_key(resource.attributes, "replicationcontroller")
        - delete_key(resource.attributes, "horizontalpodautoscaler")
        - delete_key(resource.attributes, "resourcequota")
        - delete_key(resource.attributes, "volumename")
        - delete_key(resource.attributes, "persistentvolume")
        - delete_key(resource.attributes, "persistentvolumeclaim")
      transform/low_data_mode_inator:
        metric_statements:
        - context: metric
          statements:
          - set(description, "")
          - set(unit, "")
        - context: datapoint
          statements:
          - delete_key(attributes, "id")
          - delete_key(attributes, "name")
          - delete_key(attributes, "interface")
          - delete_key(attributes, "cpu")
      transform/role_labels:
        metric_statements:
        - context: resource
          statements:
          - set(resource.cache["roles"], resource.attributes)
          - keep_matching_keys(resource.cache["roles"], "k8s.node.role.*")
          - set(resource.cache["roleString"], Concat([resource.cache["roles"]], ","))
          - replace_pattern(resource.cache["roleString"], "k8s.node.role.", "")
          - delete_matching_keys(resource.attributes, "k8s.node.role.*")
          - set(resource.attributes["k8s.node.roles"], resource.cache["roleString"]) where
            Len(resource.cache["roleString"]) > 2
    receivers:
      hostmetrics:
        collection_interval: 1m
        root_path: /hostfs
        scrapers:
          cpu:
            metrics:
              system.cpu.time:
                enabled: false
              system.cpu.utilization:
                enabled: true
          disk:
            metrics:
              system.disk.merged:
                enabled: false
              system.disk.pending_operations:
                enabled: false
              system.disk.weighted_io_time:
                enabled: false
          filesystem:
            exclude_mount_points:
              match_type: regexp
              mount_points:
              - /var/lib/kubelet/*
            metrics:
              system.filesystem.utilization:
                enabled: true
          load:
            metrics:
              system.cpu.load_average.15m:
                enabled: true
              system.cpu.load_average.1m:
                enabled: true
              system.cpu.load_average.5m:
                enabled: true
          memory:
            metrics:
              system.memory.utilization:
                enabled: true
          network:
            metrics:
              system.network.connections:
                enabled: false
          paging:
            metrics:
              system.paging.faults:
                enabled: false
              system.paging.utilization:
                enabled: false
          process:
            metrics:
              process.cpu.time:
                enabled: false
              process.cpu.utilization:
                enabled: true
            mute_process_exe_error: true
            mute_process_io_error: true
            mute_process_name_error: true
            mute_process_user_error: true
      kubeletstats:
        auth_type: serviceAccount
        collection_interval: 1m
        endpoint: ${HOST_IP}:10250
        insecure_skip_verify: true
        metrics:
          k8s.container.cpu_limit_utilization:
            enabled: true
      prometheus:
        config:
          scrape_configs:
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: cadvisor
            kubernetes_sd_configs:
            - role: node
            metric_relabel_configs:
            - action: keep
              regex: ${OTELCOL_METRICS_KEEP}
              source_labels:
              - __name__
            - action: drop
              regex: ${OTELCOL_METRICS_DROP}
              source_labels:
              - __name__
            relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            - action: replace
              replacement: cadvisor
              target_label: job_label
            - action: keep
              regex: ${KUBE_NODE_NAME}
              source_labels:
              - __meta_kubernetes_node_name
            scheme: https
            scrape_interval: 1m
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes
          - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            job_name: kubelet
            kubernetes_sd_configs:
            - role: node
            metric_relabel_configs:
            - action: keep
              regex: ${OTELCOL_METRICS_KEEP}
              source_labels:
              - __name__
            - action: drop
              regex: ${OTELCOL_METRICS_DROP}
              source_labels:
              - __name__
            relabel_configs:
            - replacement: kubernetes.default.svc.cluster.local:443
              target_label: __address__
            - regex: (.+)
              replacement: /api/v1/nodes/$${1}/proxy/metrics
              source_labels:
              - __meta_kubernetes_node_name
              target_label: __metrics_path__
            - action: replace
              replacement: kubelet
              target_label: job_label
            - action: keep
              regex: ${KUBE_NODE_NAME}
              source_labels:
              - __meta_kubernetes_node_name
            scheme: https
            scrape_interval: 1m
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              insecure_skip_verify: false
              server_name: kubernetes
      prometheus/app_metrics:
        config:
          scrape_configs:
          - job_name: kubernetes-apps
            kubernetes_sd_configs:
            - role: pod
              selectors:
              - field: spec.nodeName=${KUBE_NODE_NAME}
                role: pod
            metric_relabel_configs:
            - action: replace
              replacement: kubernetes-apps
              target_label: job_label
            - action: keep
              regex: ${OTELCOL_METRICS_KEEP}
              source_labels:
              - __name__
            - action: drop
              regex: ${OTELCOL_METRICS_DROP}
              source_labels:
              - __name__
            relabel_configs:
            - action: keep
              regex: "true"
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scrape
            - action: replace
              regex: ([^:]+)(?::\d+)?;(\d+)
              replacement: $$1:$$2
              source_labels:
              - __address__
              - __meta_kubernetes_pod_annotation_prometheus_io_port
              target_label: __address__
            - action: replace
              regex: (https?)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_scheme
              target_label: __scheme__
            - action: replace
              regex: (.+)
              source_labels:
              - __meta_kubernetes_pod_annotation_prometheus_io_path
              target_label: __metrics_path__
            - action: drop
              regex: .*kube-state-metrics.*
              source_labels:
              - __meta_kubernetes_pod_name
            - action: replace
              source_labels:
              - __meta_kubernetes_namespace
              target_label: namespace
            - action: replace
              source_labels:
              - __meta_kubernetes_pod_name
              target_label: pod
            scrape_interval: 1m
            tls_config:
              insecure_skip_verify: true
    service:
      pipelines:
        metrics/default:
          exporters:
          - routing/metrics_egress
          - debug
          processors:
          - memory_limiter
          - filter/include_exclude_metrics_custom_configmap
          - resource/newrelic
          - cumulativetodelta
          receivers:
          - routing/nr_metrics_pipelines
        metrics/egress:
          exporters:
          - otlphttp/newrelic
          processors:
          - batch
          receivers:
          - routing/metrics_egress
        metrics/ingress:
          exporters:
          - routing/nr_metrics_pipelines
          receivers:
          - hostmetrics
          - kubeletstats
          - prometheus
          - prometheus/app_metrics
        metrics/nr:
          exporters:
          - routing/metrics_egress
          processors:
          - memory_limiter
          - filter/include_exclude_metrics_custom_configmap
          - metricstransform/hostmetrics_cpu
          - filter/exclude_cpu_utilization
          - filter/exclude_memory_utilization
          - filter/exclude_memory_usage
          - filter/exclude_filesystem_utilization
          - filter/exclude_filesystem_usage
          - filter/exclude_filesystem_inodes_usage
          - filter/exclude_system_disk
          - filter/exclude_system_paging
          - filter/exclude_network
          - attributes/exclude_system_paging
          - resourcedetection/env
          - resourcedetection/cloudproviders
          - resource/newrelic
          - transform/low_data_mode_inator
          - resource/low_data_mode_inator
          - k8sattributes/ksm
          - cumulativetodelta
          - transform/role_labels
          - batch
          receivers:
          - routing/nr_metrics_pipelines
        metrics/nr_prometheus_cadv_kubelet:
          exporters:
          - routing/metrics_egress
          processors:
          - memory_limiter
          - filter/include_exclude_metrics_custom_configmap
          - filter/nr_exclude_container_zero_values
          - resourcedetection/env
          - resourcedetection/cloudproviders
          - resource/newrelic
          - transform/low_data_mode_inator
          - resource/low_data_mode_inator
          - groupbyattrs
          - transform/ksm
          - k8sattributes/ksm
          - cumulativetodelta
          - transform/role_labels
          - batch
          receivers:
          - routing/nr_metrics_pipelines